Order Analytics: Insights
import pandas as pd

# List of queries for SQL Analytics project
queries = [
    """
    -- 1. Get total number of orders for each customer
    SELECT customer_id, COUNT(order_id) AS total_orders
    FROM orders
    GROUP BY customer_id
    ORDER BY total_orders DESC;
    """,
    
    """
    -- 2. Get total sales by payment type
    SELECT payment_type, SUM(payment_value) AS total_sales
    FROM payments
    GROUP BY payment_type
    ORDER BY total_sales DESC;
    """,
    
    """
    -- 3. Get the average rating for each product
    SELECT oi.product_id, AVG(r.review_score) AS avg_rating
    FROM reviews r
    JOIN order_items oi ON r.order_id = oi.order_id
    GROUP BY oi.product_id
    ORDER BY avg_rating DESC;
    """,
    
    """
    -- 4. Get the total revenue for each seller (adjusted for missing quantity column)
    SELECT seller_id, SUM(price) AS total_revenue
    FROM order_items
    GROUP BY seller_id
    ORDER BY total_revenue DESC;
    """,
    
    """
    -- 5. Get the products with the most reviews (Top 10)
    SELECT oi.product_id, COUNT(r.review_id) AS total_reviews
    FROM reviews r
    JOIN order_items oi ON r.order_id = oi.order_id
    GROUP BY oi.product_id
    ORDER BY total_reviews DESC
    LIMIT 10;
    """,
    
    """
    -- 6. Get the total number of products in each product category
    SELECT "product category", COUNT(product_id) AS total_products
    FROM products
    GROUP BY "product category"
    ORDER BY total_products DESC;
    """,
    
    """
    -- 7. Get the most frequent order status
    SELECT order_status, COUNT(order_id) AS status_count
    FROM orders
    GROUP BY order_status
    ORDER BY status_count DESC;
    """,
    
    """
    -- 8. Get the average shipping time by seller
    SELECT oi.seller_id, AVG(julianday(o.order_delivered_customer_date) - julianday(o.order_purchase_timestamp)) AS avg_shipping_time
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    WHERE o.order_delivered_customer_date IS NOT NULL
    GROUP BY oi.seller_id
    ORDER BY avg_shipping_time;
    """,
    
    """
    -- 9. Find the top 5 cities with the highest number of sellers
    SELECT seller_city, COUNT(seller_id) AS num_sellers
    FROM sellers
    GROUP BY seller_city
    ORDER BY num_sellers DESC
    LIMIT 5;
    """,
    
    """
    -- 10. Get the top 5 cities with the highest number of orders
    SELECT customer_city, COUNT(order_id) AS num_orders
    FROM orders
    JOIN customers ON orders.customer_id = customers.customer_id
    GROUP BY customer_city
    ORDER BY num_orders DESC
    LIMIT 5;
    """,
    
    """
    -- 11. Get total revenue for each product
    SELECT oi.product_id, SUM(oi.price) AS total_revenue
    FROM order_items oi
    GROUP BY oi.product_id
    ORDER BY total_revenue DESC;
    """,
    
    """
    -- 12. Find the average number of items per order
    SELECT AVG(order_items_count) AS avg_items_per_order
    FROM (
      SELECT order_id, COUNT(order_item_id) AS order_items_count
      FROM order_items
      GROUP BY order_id
    );
    """,
    
    """
    -- 13. Find the most common shipping limit dates
    SELECT shipping_limit_date, COUNT(order_id) AS total_orders
    FROM order_items
    GROUP BY shipping_limit_date
    ORDER BY total_orders DESC
    LIMIT 10;
    """,
    
    """
    -- 14. Get the total number of orders per customer based on customer state
    SELECT customer_state, COUNT(order_id) AS total_orders
    FROM orders
    JOIN customers ON orders.customer_id = customers.customer_id
    GROUP BY customer_state
    ORDER BY total_orders DESC;
    """,
    
    """
    -- 15. Get the top 5 cities with the highest average payment value
    SELECT customer_city, AVG(payment_value) AS avg_payment_value
    FROM payments
    JOIN orders ON payments.order_id = orders.order_id
    JOIN customers ON orders.customer_id = customers.customer_id
    GROUP BY customer_city
    ORDER BY avg_payment_value DESC
    LIMIT 5;
    """,
    
    """
    -- 16. Get the number of orders during festivals (assuming festival is based on event dates or external data)
    SELECT COUNT(order_id) AS total_orders
    FROM orders
    WHERE strftime('%m', order_purchase_timestamp) IN ('12', '01', '05') -- example months for festivals
    """,
    
    """
    -- 17. Get the total revenue generated by each city
    SELECT customer_city, SUM(payment_value) AS total_revenue
    FROM payments
    JOIN orders ON payments.order_id = orders.order_id
    JOIN customers ON orders.customer_id = customers.customer_id
    GROUP BY customer_city
    ORDER BY total_revenue DESC;
    """,
    
    """
    -- 18. Get the average order delivery time by city
    SELECT customer_city, AVG(julianday(order_delivered_customer_date) - julianday(order_purchase_timestamp)) AS avg_delivery_time
    FROM orders
    JOIN customers ON orders.customer_id = customers.customer_id
    WHERE order_delivered_customer_date IS NOT NULL
    GROUP BY customer_city
    ORDER BY avg_delivery_time;
    """,
    
    """
    -- 19. Find the top 5 products with the highest average price
    SELECT product_id, AVG(price) AS avg_price
    FROM order_items
    GROUP BY product_id
    ORDER BY avg_price DESC
    LIMIT 5;
    """,
    
    """
    -- 20. Get the number of products sold by each seller
    SELECT seller_id, COUNT(order_item_id) AS products_sold
    FROM order_items
    GROUP BY seller_id
    ORDER BY products_sold DESC;
    """
]

# Execute each query and display the results
for i, query in enumerate(queries):
    print(f"\n--- Running Query {i+1} ---")
    print(f"Query {i+1} Description: {queries[i].strip().splitlines()[0]}\n")
    
    # Fetch results from the query
    result = pd.read_sql(query, conn)
    
    # Display the output for each query
    display(result)
    print("\n--- End of Query ---\n")

Customer Behavior Analysis
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# List of queries for SQL Analytics project
queries = [
    """
    -- Segment customers based on order frequency and total spending
    SELECT customers.customer_id, 
       COUNT(DISTINCT orders.order_id) AS order_count,
       SUM(order_items.price) AS total_spending
    FROM customers
    JOIN orders ON customers.customer_id = orders.customer_id
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY customers.customer_id
    HAVING total_spending > 1000
    ORDER BY total_spending DESC;
    """,
    
    """
    -- Find the most purchased product categories by customers
    SELECT "product category", 
       COUNT(DISTINCT order_items.order_id) AS total_orders,
       SUM(order_items.price) AS total_revenue
    FROM order_items
    JOIN products ON order_items.product_id = products.product_id
    GROUP BY "product category"
    ORDER BY total_orders DESC;
    """,
    
    """
    -- Analyze average review scores for each product category
    SELECT products."product category",
       AVG(reviews.review_score) AS average_review_score
    FROM reviews
    JOIN order_items ON reviews.order_id = order_items.order_id
    JOIN products ON order_items.product_id = products.product_id
    GROUP BY products."product category"
    ORDER BY average_review_score DESC;
    """,
    
    """
    -- Analyze customer behavior based on their location
    SELECT customer_state, 
           COUNT(DISTINCT orders.order_id) AS total_orders,
           SUM(order_items.price) AS total_spending
    FROM customers
    JOIN orders ON customers.customer_id = orders.customer_id
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY customer_state
    ORDER BY total_spending DESC;
    """,
    
    """
    -- Investigate the popularity of different payment methods
    SELECT payment_type, 
           COUNT(DISTINCT orders.order_id) AS order_count,
           SUM(payments.payment_value) AS total_value
    FROM payments
    JOIN orders ON payments.order_id = orders.order_id
    GROUP BY payment_type
    ORDER BY total_value DESC;
    """
]

# Execute each query and display the results with visualization
for i, query in enumerate(queries):
    print(f"\n--- Running Query {i+1} ---")
    print(f"Query {i+1} Description: {queries[i].strip().splitlines()[0]}\n")
    
    # Fetch results from the query
    result = pd.read_sql(query, conn)
    
    # Display the output for each query
    display(result)
    
    # Limit to top 5 and bottom 5
    if 'order_count' in result.columns and 'total_spending' in result.columns:
        result_top_bottom = pd.concat([result.head(5), result.tail(5)])
        
        # Bar plot for total spending per customer or state
        plt.figure(figsize=(10, 6))
        sns.barplot(x='customer_id', y='total_spending', data=result_top_bottom)
        plt.xticks(rotation=90)
        plt.title('Total Spending per Customer (Top 5 and Bottom 5)')
        plt.show()
    
    elif 'total_orders' in result.columns and 'total_revenue' in result.columns:
        result_top_bottom = pd.concat([result.head(5), result.tail(5)])
        
        # Bar plot for the most purchased product categories
        plt.figure(figsize=(10, 6))
        sns.barplot(x="product category", y="total_revenue", data=result_top_bottom)
        plt.xticks(rotation=90)
        plt.title('Most Purchased Product Categories (Top 5 and Bottom 5)')
        plt.show()
    
    elif 'average_review_score' in result.columns:
        result_top_bottom = pd.concat([result.head(5), result.tail(5)])
        
        # Bar plot for average review score per product category
        plt.figure(figsize=(10, 6))
        sns.barplot(x="product category", y="average_review_score", data=result_top_bottom)
        plt.xticks(rotation=90)
        plt.title('Average Review Scores per Product Category (Top 5 and Bottom 5)')
        plt.show()
    
    elif 'customer_state' in result.columns and 'total_spending' in result.columns:
        result_top_bottom = pd.concat([result.head(5), result.tail(5)])
        
        # Bar plot for total spending per customer state
        plt.figure(figsize=(10, 6))
        sns.barplot(x='customer_state', y='total_spending', data=result_top_bottom)
        plt.xticks(rotation=90)
        plt.title('Total Spending per Customer State (Top 5 and Bottom 5)')
        plt.show()
    
    elif 'payment_type' in result.columns and 'total_value' in result.columns:
        # Bar plot for popularity of different payment methods (no filtering for top/bottom)
        plt.figure(figsize=(10, 6))
        sns.barplot(x='payment_type', y='total_value', data=result)
        plt.xticks(rotation=45)
        plt.title('Popularity of Payment Methods')
        plt.show()

    print("\n--- End of Query ---\n")

Sales Trend Analysis
import pandas as pd
import matplotlib.pyplot as plt
import sqlite3  # Assuming SQLite database connection

# Assuming conn is your database connection
conn = sqlite3.connect('ecommerce.db')

# List of queries for SQL Analytics project
queries = [
    """
    SELECT strftime('%Y-%m', orders.order_purchase_timestamp) AS month,
           SUM(order_items.price) AS total_sales,
           COUNT(DISTINCT orders.order_id) AS total_orders
    FROM orders
    JOIN order_items ON orders.order_id = order_items.order_id
    WHERE strftime('%Y', orders.order_purchase_timestamp) BETWEEN '2016' AND '2018'
    GROUP BY strftime('%Y-%m', orders.order_purchase_timestamp)
    ORDER BY month;
    """,

    """
    SELECT products."product category", 
           COUNT(DISTINCT order_items.order_id) AS total_orders,
           SUM(order_items.price) AS total_revenue
    FROM order_items
    JOIN products ON order_items.product_id = products.product_id
    GROUP BY products."product category"
    ORDER BY total_revenue DESC
    LIMIT 5;
    """,
    
    """
    SELECT products."product category",
           AVG(reviews.review_score) AS average_review_score
    FROM reviews
    JOIN order_items ON reviews.order_id = order_items.order_id
    JOIN products ON order_items.product_id = products.product_id
    GROUP BY products."product category"
    ORDER BY average_review_score DESC
    LIMIT 5;
    """
]

# Execute each query and display the results
for i, query in enumerate(queries):
    print(f"\n--- Running Query {i+1} ---")
    print(f"Query {i+1} Description: {queries[i].strip().splitlines()[0]}\n")
    
    # Fetch results from the query
    result = pd.read_sql(query, conn)
    
    # Visualization for the first query (monthly sales)
    if i == 0:
        result['month'] = pd.to_datetime(result['month'])
        plt.figure(figsize=(10, 6))
        plt.plot(result['month'], result['total_sales'], marker='o')
        plt.title('Monthly Sales Trend (2016-2018)')
        plt.xlabel('Month')
        plt.ylabel('Total Sales')
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.show()
    

    # Visualization for the third query (top products by revenue)
    if i == 1:
        plt.figure(figsize=(10, 6))
        plt.bar(result['product category'], result['total_revenue'], color='green')
        plt.title('Top Products by Revenue')
        plt.xlabel('Product Category')
        plt.ylabel('Total Revenue')
        plt.xticks(rotation=45)
        plt.show()
    
    # Visualization for the fourth query (average review score by product category)
    if i == 2:
        plt.figure(figsize=(10, 6))
        plt.bar(result['product category'], result['average_review_score'], color='orange')
        plt.title('Average Review Score by Product Category')
        plt.xlabel('Product Category')
        plt.ylabel('Average Review Score')
        plt.xticks(rotation=45)
        plt.show()

    # Display the output for each query
    display(result)
    print("\n--- End of Query ---\n")
